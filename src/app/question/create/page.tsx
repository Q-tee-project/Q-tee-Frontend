'use client';

import React, { useState } from 'react';
import { PageHeader } from '@/components/layout/PageHeader';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { PlusCircle } from 'lucide-react';
import KoreanGenerator from '@/components/subjects/KoreanGenerator';
import EnglishGenerator from '@/components/subjects/EnglishGenerator';
import MathGenerator from '@/components/subjects/MathGenerator';
import { QuestionPreview } from '@/components/question/QuestionPreview';
import { EnglishWorksheetDetail } from '@/app/question/bank/components/EnglishWorksheetDetail';
import { ErrorToast } from '@/app/question/bank/components/ErrorToast';
import { ValidationDashboard } from '@/components/validation/ValidationDashboard';
import { ValidationReportModal } from '@/components/validation/ValidationReportModal';
import { useKoreanGeneration } from '@/hooks/useKoreanGeneration';
import { useMathGeneration } from '@/hooks/useMathGeneration';
import { useEnglishGeneration } from '@/hooks/useEnglishGeneration';
import { useWorksheetSave } from '@/hooks/useWorksheetSave';
import { useEnglishWorksheetSave } from '@/hooks/useEnglishWorksheetSave';
import { EnglishWorksheet } from '@/types/english';
import { EnglishService } from '@/services/englishService';

const SUBJECTS = ['Íµ≠Ïñ¥', 'ÏòÅÏñ¥', 'ÏàòÌïô'];

// EnglishUIDataÎ•º EnglishWorksheetDetail ÌòïÏãùÏúºÎ°ú Ïó≠Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
const convertUIDataToWorksheetDetail = (uiData: any) => {
  if (!uiData) return null;

  return {
    selectedWorksheet: {
      worksheet_id: uiData.worksheetInfo.id || 'temp-generation',
      worksheet_name: uiData.worksheetInfo.name,
      worksheet_date: uiData.worksheetInfo.date,
      worksheet_time: uiData.worksheetInfo.time,
      worksheet_duration: uiData.worksheetInfo.duration,
      worksheet_subject: uiData.worksheetInfo.subject,
      worksheet_level: uiData.worksheetInfo.level,
      worksheet_grade: uiData.worksheetInfo.grade,
      total_questions: uiData.questions.length,
    },
    worksheetProblems: {
      passages: uiData.passages.map((p: any) => ({
        passage_id: p.id,
        passage_type: p.type,
        passage_content: p.content,
        original_content: p.originalContent,
        korean_translation: p.koreanTranslation,
        related_questions: p.relatedQuestionIds,
      })),
      questions: uiData.questions.map((q: any) => ({
        question_id: q.id,
        question_text: q.text || q.questionText,
        question_type: q.type,
        question_subject: q.subject,
        question_difficulty: q.difficulty,
        question_detail_type: q.detailType,
        question_passage_id: q.passageId,
        example_content: q.exampleContent,
        example_original_content: q.exampleOriginalContent,
        example_korean_translation: q.exampleKoreanTranslation,
        question_choices: q.choices,
        correct_answer: q.correctAnswer,
        explanation: q.explanation,
        learning_point: q.learningPoint,
      })),
    }
  };
};


export default function CreatePage() {
  const [subject, setSubject] = useState<string>('');
  const [forceUpdateKey, setForceUpdateKey] = useState(0); // Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅÏùÑ ÏúÑÌïú ÌÇ§
  const [showValidationReport, setShowValidationReport] = useState(false); // Í≤ÄÏ¶ù Î¶¨Ìè¨Ìä∏ Î™®Îã¨ ÏÉÅÌÉú
  const [isEditingTitle, setIsEditingTitle] = useState(false); // Ï†úÎ™© Ìé∏Ïßë ÏÉÅÌÉú
  const [showAnswerSheet, setShowAnswerSheet] = useState(false); // Ï†ïÎãµÏßÄ ÌëúÏãú ÏÉÅÌÉú
  const [isWorksheetSaved, setIsWorksheetSaved] = useState(false); // ÏõåÌÅ¨ÏãúÌä∏ Ï†ÄÏû• ÏÉÅÌÉú

  // Í≥ºÎ™©Î≥Ñ ÏÉùÏÑ± ÌõÖÎì§
  const koreanGeneration = useKoreanGeneration();
  const mathGeneration = useMathGeneration();
  const englishGeneration = useEnglishGeneration();

  // Î¨∏Ï†úÏßÄ Ï†ÄÏû• ÌõÖ
  const worksheetSave = useWorksheetSave();
  const englishWorksheetSave = useEnglishWorksheetSave();

  // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Í≥ºÎ™©Ïóê Îî∞Î•∏ ÏÉÅÌÉú
  const currentGeneration =
    subject === 'Íµ≠Ïñ¥' ? koreanGeneration : subject === 'ÏàòÌïô' ? mathGeneration : englishGeneration;


  // Toast ÏûêÎèô Îã´Í∏∞
  React.useEffect(() => {
    if (currentGeneration.errorMessage) {
      const timer = setTimeout(() => {
        currentGeneration.clearError();
      }, 5000); // 5Ï¥à ÌõÑ ÏûêÎèô Îã´Í∏∞

      return () => clearTimeout(timer);
    }
  }, [currentGeneration.errorMessage]);

  // Í≥ºÎ™© Î≥ÄÍ≤Ω Ïãú Ï¥àÍ∏∞Ìôî
  const handleSubjectChange = (newSubject: string) => {
    setSubject(newSubject);
    currentGeneration.resetGeneration();
    if (newSubject === 'ÏòÅÏñ¥') {
      englishWorksheetSave.resetWorksheet();
    } else {
      worksheetSave.resetWorksheet();
    }
  };

  // Í≥ºÎ™©Î≥Ñ Î¨∏Ï†ú ÏÉùÏÑ± Ìï∏Îì§Îü¨
  const handleGenerate = (data: any) => {
    if (subject === 'ÏàòÌïô') {
      // Í≤ÄÏ¶ù Í∏∞Îä•Ïù¥ ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ Í≤ÄÏ¶ù Ìè¨Ìï® ÏÉùÏÑ± ÏÇ¨Ïö©
      if (mathGeneration.enableValidation) {
        mathGeneration.generateMathProblemsWithValidation(data);
      } else {
        mathGeneration.generateMathProblems(data);
      }
    } else if (subject === 'Íµ≠Ïñ¥') {
      koreanGeneration.generateKoreanProblems(data);
    } else if (subject === 'ÏòÅÏñ¥') {
      englishGeneration.generateEnglishProblems(data);
    }
  };

  // Î¨∏Ï†ú Ïû¨ÏÉùÏÑ± Ìï∏Îì§Îü¨ - bank ÌéòÏù¥ÏßÄÏôÄ ÎèôÏùºÌïú Î∞©Ïãù ÏÇ¨Ïö©
  const handleRegenerateQuestion = async (questionId: number, prompt?: string) => {
    console.log('üîÑ Ïû¨ÏÉùÏÑ± ÏãúÏûë:', { questionId, prompt });

    if (!prompt) {
      alert('Ïû¨ÏÉùÏÑ± ÏöîÍµ¨ÏÇ¨Ìï≠ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    try {
      // ÌòÑÏû¨ Î¨∏Ï†ú Ï∞æÍ∏∞
      const currentQuestion = currentGeneration.previewQuestions.find(q => q.id === questionId);
      console.log('üìù ÌòÑÏû¨ Î¨∏Ï†ú:', currentQuestion);

      if (!currentQuestion) {
        alert('Î¨∏Ï†úÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        return;
      }

      // Ïû¨ÏÉùÏÑ± ÏãúÏûë ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï
      currentGeneration.updateState({
        regeneratingQuestionId: questionId
      });

      // MathServiceÏùò Ïû¨ÏÉùÏÑ± API ÏßÅÏ†ë Ìò∏Ï∂ú
      const { MathService } = await import('@/services/mathService');

      // backendIdÍ∞Ä Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïùò Î¨∏Ï†ú ID
      const backendProblemId = currentQuestion.backendId;
      if (!backendProblemId) {
        alert('Î∞±ÏóîÎìú Î¨∏Ï†ú IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Î¨∏Ï†úÍ∞Ä ÏïÑÏßÅ Ï†ÄÏû•ÎêòÏßÄ ÏïäÏïòÏùÑ Ïàò ÏûàÏäµÎãàÎã§.');
        return;
      }

      const regenerateData = {
        problem_id: backendProblemId,
        requirements: prompt,
        current_problem: {
          question: currentQuestion.question,
          problem_type: currentQuestion.problem_type || 'multiple_choice',
          choices: currentQuestion.choices || [],
          correct_answer: currentQuestion.correct_answer || '',
          explanation: currentQuestion.explanation || '',
        }
      };

      const taskResponse = await MathService.regenerateProblemAsync(regenerateData);

      if (taskResponse?.task_id) {
        // ÏûëÏóÖ ÏÉÅÌÉú Ìè¥ÎßÅ
        let attempts = 0;
        const maxAttempts = 300;
        const interval = 2000;

        const pollTaskStatus = async () => {
          while (attempts < maxAttempts) {
            try {
              const statusResponse = await MathService.getTaskStatus(taskResponse.task_id);

              if (statusResponse?.status === 'SUCCESS') {
                // ÏÑ±Í≥µ Ïãú Î¨∏Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ (LaTeX Î≥ÄÌôò Ï†úÍ±∞ - LaTeXRendererÍ∞Ä Ï≤òÎ¶¨)
                const result = statusResponse.result;

                // questionIdÎäî ÌîÑÎ°†Ìä∏ÏóîÎìú ID, backendIdÏôÄ Îß§Ïπ≠Ìï¥Ïïº Ìï®
                const updatedQuestions = currentGeneration.previewQuestions.map(q => {
                  // ÌîÑÎ°†Ìä∏ÏóîÎìú ID ÎòêÎäî Î∞±ÏóîÎìú ID Ï§ë ÌïòÎÇòÎùºÎèÑ Îß§Ïπ≠ÎêòÎ©¥ ÏóÖÎç∞Ïù¥Ìä∏
                  const isTargetQuestion = q.id === questionId || q.backendId === backendProblemId;

                  if (isTargetQuestion) {
                    console.log('üéØ Î¨∏Ï†ú Îß§Ïπ≠Îê®:', {
                      frontendId: q.id,
                      backendId: q.backendId,
                      questionId,
                      backendProblemId
                    });

                    return {
                      ...q,
                      question: result.question || q.question,
                      problem_type: result.problem_type || q.problem_type,
                      choices: result.choices || q.choices,
                      correct_answer: result.correct_answer || q.correct_answer,
                      explanation: result.explanation || q.explanation,
                    };
                  }
                  return q;
                });

                console.log('üîÑ Ïû¨ÏÉùÏÑ± Í≤∞Í≥º ÏóÖÎç∞Ïù¥Ìä∏:', {
                  originalQuestions: currentGeneration.previewQuestions.length,
                  updatedQuestions: updatedQuestions.length,
                  questionId,
                  result
                });

                // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ with Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅ
                if (subject === 'ÏàòÌïô') {
                  // ÏôÑÏ†ÑÌûà ÏÉàÎ°úÏö¥ Î∞∞Ïó¥Í≥º Í∞ùÏ≤¥ Ï∞∏Ï°∞Î°ú ÏóÖÎç∞Ïù¥Ìä∏
                  const newQuestions = updatedQuestions.map(q => ({
                    ...q,
                    // ÏàòÌïô Î¨∏Ï†úÏùò Í≤ΩÏö∞ choicesÎ•º optionsÎ°úÎèÑ Îß§Ìïë
                    options: q.choices || q.options,
                    title: q.question || q.title
                  }));

                  mathGeneration.updateState({
                    previewQuestions: newQuestions,
                    regeneratingQuestionId: null,
                    showRegenerationInput: null,
                    regenerationPrompt: ''
                  });
                  console.log('‚úÖ mathGeneration ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
                } else {
                  const newQuestions = updatedQuestions.map(q => ({
                    ...q,
                    // Îã§Î•∏ Í≥ºÎ™©Ïùò Í≤ΩÏö∞ÎèÑ ÎèôÏùºÌïòÍ≤å Îß§Ìïë
                    options: q.choices || q.options,
                    title: q.question || q.title
                  }));

                  currentGeneration.updateState({
                    previewQuestions: newQuestions,
                    regeneratingQuestionId: null,
                    showRegenerationInput: null,
                    regenerationPrompt: ''
                  });
                  console.log('‚úÖ currentGeneration ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
                }

                // Ïª¥Ìè¨ÎÑåÌä∏ Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅ
                setForceUpdateKey(prev => prev + 1);
                console.log('üîÑ Ïª¥Ìè¨ÎÑåÌä∏ Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅ Ìä∏Î¶¨Í±∞');

                alert('Î¨∏Ï†úÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïû¨ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.');
                return;
              } else if (statusResponse?.status === 'FAILURE') {
                throw new Error(statusResponse.error || 'Ïû¨ÏÉùÏÑ± ÏûëÏóÖÏù¥ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
              }

              // ÏïÑÏßÅ ÏßÑÌñâ Ï§ëÏù¥Î©¥ Ïû†Ïãú ÎåÄÍ∏∞
              await new Promise(resolve => setTimeout(resolve, interval));
              attempts++;
            } catch (error) {
              console.error('ÏûëÏóÖ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë Ïò§Î•ò:', error);
              attempts++;
              await new Promise(resolve => setTimeout(resolve, interval));
            }
          }

          throw new Error('Ïû¨ÏÉùÏÑ± ÏûëÏóÖÏù¥ ÏãúÍ∞Ñ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§.');
        };

        await pollTaskStatus();
      }
    } catch (error: any) {
      console.error('Î¨∏Ï†ú Ïû¨ÏÉùÏÑ± Ïã§Ìå®:', error);
      alert(`Ïû¨ÏÉùÏÑ± Ïã§Ìå®: ${error.message}`);

      // Ïã§Ìå® Ïãú Ïû¨ÏÉùÏÑ± ÏÉÅÌÉú Ìï¥Ï†ú
      currentGeneration.updateState({
        regeneratingQuestionId: null,
        showRegenerationInput: null,
        regenerationPrompt: ''
      });
    }
  };

  // Î¨∏Ï†úÏßÄ Ï†ÄÏû• Ìï∏Îì§Îü¨
  const handleSaveWorksheet = () => {
    if (subject === 'ÏòÅÏñ¥') {
      // ÏòÅÏñ¥ Ï†ÑÏö© Ï†ÄÏû• Î°úÏßÅ
      if (!englishGeneration.uiData) {
        currentGeneration.updateState({ errorMessage: 'Ï†ÄÏû•Ìï† ÏòÅÏñ¥ Î¨∏Ï†úÍ∞Ä ÏóÜÏäµÎãàÎã§.' });
        return;
      }

      // Ï†úÎ™©Ïù¥ ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ Ï†úÎ™© ÏÑ§Ï†ï
      if (!englishWorksheetSave.worksheetName.trim()) {
        englishWorksheetSave.setWorksheetName(`ÏòÅÏñ¥ Î¨∏Ï†úÏßÄ ${new Date().toLocaleDateString()}`);
      }

      englishWorksheetSave.saveEnglishWorksheet(
        englishGeneration.uiData,
        () => {
          currentGeneration.updateState({
            errorMessage: 'ÏòÅÏñ¥ Î¨∏Ï†úÏßÄÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§! ‚úÖ',
          });
        },
        (error) => {
          currentGeneration.updateState({ errorMessage: error });
        },
      );
    } else {
      // Í∏∞Ï°¥ Ï†ÄÏû• Î°úÏßÅ (ÏàòÌïô, Íµ≠Ïñ¥)
      worksheetSave.saveWorksheet(
        subject,
        currentGeneration.previewQuestions,
        () => {
          currentGeneration.updateState({
            errorMessage: 'Î¨∏Ï†úÏßÄÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§! ‚úÖ',
          });
        },
        (error) => {
          currentGeneration.updateState({ errorMessage: error });
        },
      );
    }
  };


  return (
    <div className="flex flex-col" style={{ padding: '20px', display: 'flex', gap: '20px' }}>
      {/* Ìó§Îçî ÏòÅÏó≠ */}
      <PageHeader
        icon={<PlusCircle />}
        title="Î¨∏Ï†ú ÏÉùÏÑ±"
        variant="question"
        description="Í≥ºÎ™©Î≥Ñ Î¨∏Ï†úÎ•º ÏÉùÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§"
      />

      {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† ÏòÅÏó≠ */}
      <div className="flex-1 min-h-0">
        <div className="flex gap-6 h-full">
          <Card className="w-1/3 flex flex-col shadow-sm h-[calc(100vh-200px)]" style={{ gap: '0', padding: '0' }}>
            <CardHeader className="flex flex-row items-center justify-between border-b border-gray-100" style={{ padding: '20px' }}>
              <CardTitle className="text-lg font-semibold text-gray-900">Î¨∏Ï†ú ÏÉùÏÑ±</CardTitle>
            </CardHeader>
            <CardContent className="flex-1 min-h-0" style={{ padding: '20px' }}>
              {/* Í≥ºÎ™© ÌÉ≠ */}
              <div className="mb-4">
                <div className="flex gap-2">
                  {SUBJECTS.map((s) => (
                    <button
                      key={s}
                      onClick={() => handleSubjectChange(s)}
                      className={`py-2 px-4 text-sm font-medium rounded transition-colors duration-150 cursor-pointer ${
                        subject === s
                          ? 'bg-[#E6F3FF] text-[#0085FF]'
                          : 'bg-[#f5f5f5] text-[#999999]'
                      }`}
                    >
                      {s}
                    </button>
                  ))}
                </div>
              </div>
              
              {/* Í≥ºÎ™©Î≥Ñ Ïª¥Ìè¨ÎÑåÌä∏ Î†åÎçîÎßÅ */}
              <div className="overflow-y-auto pr-2" style={{ height: 'calc(100vh - 400px)' }}>
                {subject === 'Íµ≠Ïñ¥' && (
                  <KoreanGenerator
                    onGenerate={handleGenerate}
                    isGenerating={currentGeneration.isGenerating}
                  />
                )}
                {subject === 'ÏòÅÏñ¥' && (
                  <EnglishGenerator
                    onGenerate={handleGenerate}
                    isGenerating={currentGeneration.isGenerating}
                  />
                )}
                {subject === 'ÏàòÌïô' && (
                  <div className="space-y-4">
                    {/* Í≤ÄÏ¶ù ÏòµÏÖò ÌÜ†Í∏Ä */}
                    <div className="border rounded-lg p-3 bg-blue-50">
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="text-sm font-medium text-blue-900">AI Î¨∏Ï†ú Í≤ÄÏ¶ù</h4>
                          <p className="text-xs text-blue-700">
                            ÏÉùÏÑ±Îêú Î¨∏Ï†úÏùò Ï†ïÌôïÏÑ±ÏùÑ AIÍ∞Ä ÏûêÎèôÏúºÎ°ú Í≤ÄÏ¶ùÌï©ÎãàÎã§
                          </p>
                        </div>
                        <button
                          onClick={mathGeneration.toggleValidation}
                          className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                            mathGeneration.enableValidation ? 'bg-blue-600' : 'bg-gray-300'
                          }`}
                        >
                          <span
                            className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                              mathGeneration.enableValidation ? 'translate-x-6' : 'translate-x-1'
                            }`}
                          />
                        </button>
                      </div>
                    </div>

                    {/* ÏàòÌïô ÏÉùÏÑ± Ïª¥Ìè¨ÎÑåÌä∏ */}
                    <MathGenerator
                      onGenerate={handleGenerate}
                      isGenerating={currentGeneration.isGenerating}
                    />

                    {/* Í≤ÄÏ¶ù ÎåÄÏãúÎ≥¥Îìú (ÏàòÌïôÏùº ÎïåÎßå, Í≤ÄÏ¶ù ÏöîÏïΩÏù¥ ÏûàÏùÑ ÎïåÎßå) */}
                    {mathGeneration.validationSummary && (
                      <ValidationDashboard
                        summary={mathGeneration.validationSummary}
                        compact={true}
                        className="mt-4"
                      />
                    )}
                  </div>
                )}
                {!subject && (
                  <div className="text-center py-8 text-gray-500">
                    <div className="text-sm">
                      Í≥ºÎ™©ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî
                      <div className="mt-2">
                        ÏúÑÏùò ÌÉ≠ÏóêÏÑú Í≥ºÎ™©ÏùÑ ÏÑ†ÌÉùÌïòÎ©¥ Î¨∏Ï†ú ÏÉùÏÑ± ÌèºÏù¥ ÎÇòÌÉÄÎÇ©ÎãàÎã§.
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Ïò§Î•∏Ï™Ω ÏòÅÏó≠ - Í≤∞Í≥º ÎØ∏Î¶¨Î≥¥Í∏∞ ÏûêÎ¶¨ */}
          <Card className="flex-1 flex flex-col shadow-sm h-[calc(100vh-200px)]" style={{ gap: '0', padding: '0' }}>
            <CardHeader className="flex flex-row items-center justify-between border-b border-gray-100" style={{ padding: '20px' }}>
              <CardTitle className="text-lg font-semibold text-gray-900">Î¨∏Ï†úÏßÄ</CardTitle>
              {/* ÏàòÌïô Í≥ºÎ™©Ïù¥Í≥† Í≤ÄÏ¶ùÏù¥ ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ Í≤ÄÏ¶ù Î≤ÑÌäº ÌëúÏãú */}
              {subject === 'ÏàòÌïô' && mathGeneration.enableValidation && mathGeneration.validationSummary && (
                <div className="flex items-center space-x-3">
                  <span className="text-sm text-gray-600">
                    Í≤ÄÏ¶ù ÏôÑÎ£å: {mathGeneration.validationSummary.auto_approved}Í∞ú ÏäπÏù∏
                  </span>
                  <ValidationDashboard
                    summary={mathGeneration.validationSummary}
                    compact={true}
                    className="max-w-xs"
                  />
                  <button
                    onClick={() => setShowValidationReport(true)}
                    className="px-3 py-1 bg-blue-600 text-white text-xs rounded-md hover:bg-blue-700 transition-colors"
                  >
                    ÏÉÅÏÑ∏ Î¶¨Ìè¨Ìä∏
                  </button>
                </div>
              )}
            </CardHeader>
            <CardContent className="flex-1 flex flex-col">
              {/* ÏòÅÏñ¥Îäî EnglishWorksheetDetail Ïª¥Ìè¨ÎÑåÌä∏ ÏÇ¨Ïö© */}
              {subject === 'ÏòÅÏñ¥' ? (
                englishGeneration.uiData && englishGeneration.uiData.questions.length > 0 ? (
                  (() => {
                    const convertedData = convertUIDataToWorksheetDetail(englishGeneration.uiData);
                    return (
                      <EnglishWorksheetDetail
                        selectedWorksheet={convertedData?.selectedWorksheet as EnglishWorksheet | null}
                        worksheetProblems={convertedData?.worksheetProblems || {}}
                        showAnswerSheet={showAnswerSheet}
                        isEditingTitle={isEditingTitle}
                        editedTitle={englishWorksheetSave.worksheetName || `ÏòÅÏñ¥ Î¨∏Ï†úÏßÄ ${new Date().toLocaleDateString()}`}
                        onToggleAnswerSheet={() => setShowAnswerSheet(!showAnswerSheet)}
                        onEditProblem={() => {}}
                        onStartEditTitle={() => setIsEditingTitle(true)}
                        onCancelEditTitle={() => {
                          setIsEditingTitle(false);
                          englishWorksheetSave.setWorksheetName(englishWorksheetSave.worksheetName);
                        }}
                        onSaveTitle={() => {
                          setIsEditingTitle(false);
                        }}
                        onEditedTitleChange={englishWorksheetSave.setWorksheetName}
                        onRefresh={() => {
                          // Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
                          setForceUpdateKey(prev => prev + 1);
                        }}
                        mode="generation"
                        onSaveWorksheet={handleSaveWorksheet}
                        isSaving={englishWorksheetSave.isSaving}
                        onUpdateQuestion={(questionId, updatedQuestion, updatedPassage, updatedRelatedQuestions) => {
                          // ÏòÅÏñ¥ ÏÉùÏÑ± ÏÉÅÌÉúÏùò questions Î∞∞Ïó¥ ÏóÖÎç∞Ïù¥Ìä∏
                          const currentUIData = englishGeneration.uiData;
                          if (currentUIData) {
                            let updatedQuestions = [...currentUIData.questions];

                            // ÌòÑÏû¨ Î¨∏Ï†ú ÏóÖÎç∞Ïù¥Ìä∏
                            updatedQuestions = updatedQuestions.map((q: any) => {
                              if (q.question_id === questionId) {
                                return {
                                  ...q,
                                  ...updatedQuestion,
                                  // Í∞ùÍ¥ÄÏãù Ï†ïÎãµ Ïù∏Îç±Ïä§ Î≥ÄÌôò (0-based -> 1-based for UI)
                                  correct_answer: updatedQuestion.question_type === 'Í∞ùÍ¥ÄÏãù' &&
                                    typeof updatedQuestion.correct_answer === 'string' &&
                                    !isNaN(parseInt(updatedQuestion.correct_answer))
                                    ? (parseInt(updatedQuestion.correct_answer) + 1).toString()
                                    : updatedQuestion.correct_answer
                                };
                              }
                              return q;
                            });

                            // Ïó∞Í≥Ñ Î¨∏Ï†úÎì§ÎèÑ ÏóÖÎç∞Ïù¥Ìä∏ (Îã§Ï§ë Ïû¨ÏÉùÏÑ±Ïùò Í≤ΩÏö∞)
                            if (updatedRelatedQuestions && updatedRelatedQuestions.length > 0) {
                              updatedRelatedQuestions.forEach((relatedQ: any) => {
                                updatedQuestions = updatedQuestions.map((q: any) => {
                                  if (q.question_id === relatedQ.question_id) {
                                    return {
                                      ...q,
                                      ...relatedQ,
                                      // Í∞ùÍ¥ÄÏãù Ï†ïÎãµ Ïù∏Îç±Ïä§ Î≥ÄÌôò (0-based -> 1-based for UI)
                                      correct_answer: relatedQ.question_type === 'Í∞ùÍ¥ÄÏãù' &&
                                        typeof relatedQ.correct_answer === 'string' &&
                                        !isNaN(parseInt(relatedQ.correct_answer))
                                        ? (parseInt(relatedQ.correct_answer) + 1).toString()
                                        : relatedQ.correct_answer
                                    };
                                  }
                                  return q;
                                });
                              });
                            }

                            // ÏßÄÎ¨∏Ïù¥ ÏóÖÎç∞Ïù¥Ìä∏Îêú Í≤ΩÏö∞ passages Î∞∞Ïó¥ÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
                            let updatedPassages = currentUIData.passages;
                            if (updatedPassage) {
                              updatedPassages = currentUIData.passages.map((p: any) => {
                                if (p.passage_id === updatedPassage.passage_id) {
                                  return {
                                    ...p,
                                    ...updatedPassage,
                                    id: p.id, // Í∏∞Ï°¥ id Ïú†ÏßÄ
                                  };
                                }
                                return p;
                              });
                            }

                            // UIData ÏóÖÎç∞Ïù¥Ìä∏
                            englishGeneration.updateUIData({
                              ...currentUIData,
                              questions: updatedQuestions,
                              passages: updatedPassages,
                            });

                            // Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅ
                            setForceUpdateKey(prev => prev + 1);
                          }
                        }}
                      />
                    );
                  })()
                ) : (
                  <div className="flex-1 flex items-center justify-center text-gray-500">
                    {currentGeneration.isGenerating
                      ? 'ÏòÅÏñ¥ Î¨∏Ï†úÎ•º ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§...'
                      : 'ÏòÅÏñ¥ Í≥ºÎ™©ÏùÑ ÏÑ†ÌÉùÌïòÍ≥† Î¨∏Ï†úÎ•º ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî'
                    }
                  </div>
                )
              ) : (
                // Îã§Î•∏ Í≥ºÎ™©ÏùÄ Í∏∞Ï°¥ Î∞©Ïãù (forceUpdateKeyÎ°ú Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅ)
                <QuestionPreview
                  key={`${subject}-${forceUpdateKey}`}
                  previewQuestions={currentGeneration.previewQuestions}
                  isGenerating={currentGeneration.isGenerating}
                  generationProgress={currentGeneration.generationProgress}
                  worksheetName={worksheetSave.worksheetName}
                  setWorksheetName={worksheetSave.setWorksheetName}
                  regeneratingQuestionId={currentGeneration.regeneratingQuestionId}
                  regenerationPrompt={currentGeneration.regenerationPrompt}
                  setRegenerationPrompt={(prompt) =>
                    currentGeneration.updateState({ regenerationPrompt: prompt })
                  }
                  showRegenerationInput={currentGeneration.showRegenerationInput}
                  setShowRegenerationInput={(id) =>
                    currentGeneration.updateState({ showRegenerationInput: id })
                  }
                  onRegenerateQuestion={handleRegenerateQuestion}
                  onSaveWorksheet={handleSaveWorksheet}
                  isSaving={worksheetSave.isSaving}
                />
              )}
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Error Toast */}
      <ErrorToast
        error={currentGeneration.errorMessage}
        onClose={() => currentGeneration.clearError()}
      />

      {/* Validation Toast Ï†úÍ±∞ - Î¨∏Ï†úÏßÄ ÏÑπÏÖòÏóê ÌÜµÌï© */}

      {/* Í∞úÎ∞úÏö©: Í≤ÄÏ¶ù ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ */}
      {subject === 'ÏàòÌïô' && process.env.NODE_ENV === 'development' && mathGeneration.enableValidation && (
        <div className="fixed bottom-4 left-4 bg-blue-900 text-white p-2 rounded text-xs z-50 max-w-xs">
          <div className="font-bold mb-1">üîç AI Í≤ÄÏ¶ù ÏãúÏä§ÌÖú</div>
          <div>ÏÉÅÌÉú: {mathGeneration.showValidationToast ? 'Í≤ÄÏ¶ù ÏôÑÎ£å' : 'ÎåÄÍ∏∞ Ï§ë'}</div>
          <div>Î¨∏Ï†ú Ïàò: {mathGeneration.previewQuestions.length}</div>
          {mathGeneration.validationSummary && (
            <div className="mt-1 pt-1 border-t border-blue-700">
              <div>ÏäπÏù∏: {mathGeneration.validationSummary.auto_approved}</div>
              <div>Í≤ÄÌÜ†: {mathGeneration.validationSummary.manual_review_needed}</div>
            </div>
          )}
        </div>
      )}

      {/* Í≤ÄÏ¶ù ÏÉÅÏÑ∏ Î¶¨Ìè¨Ìä∏ Î™®Îã¨ */}
      <ValidationReportModal
        isOpen={showValidationReport}
        onClose={() => setShowValidationReport(false)}
        summary={mathGeneration.validationSummary}
      />
    </div>
  );
}
