'use client';

import React from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useRouter } from 'next/navigation';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog';
import { Checkbox } from '@/components/ui/checkbox';
import { FileText, ClipboardList, BarChart3, BookOpen, Clock, CheckCircle, Calendar, Settings } from 'lucide-react';
import { RxDashboard } from 'react-icons/rx';
import { PageHeader } from '@/components/layout/PageHeader';
import { Radar, RadarChart, PolarGrid, Legend, PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer, ComposedChart, Line, Area, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';
import { mathService } from '@/services/mathService';
import { koreanService } from '@/services/koreanService';
import { EnglishService } from '@/services/englishService';

const StudentDashboard = () => {
  const { userProfile } = useAuth();
  const router = useRouter();
  const [selectedClass, setSelectedClass] = React.useState('1'); // Í∏∞Î≥∏Í∞í: Ï≤´ Î≤àÏß∏ ÌÅ¥ÎûòÏä§
  const [selectedAssignment, setSelectedAssignment] = React.useState('');
  const [dashboardAssignments, setDashboardAssignments] = React.useState<any[]>([]);
  const [isLoadingAssignments, setIsLoadingAssignments] = React.useState(false);
  const [chartType, setChartType] = React.useState<'period' | 'assignment'>('period'); // Í∏∞Î≥∏Í∞í: Í∏∞Í∞ÑÎ≥Ñ
  const [selectedAssignments, setSelectedAssignments] = React.useState<string[]>([]);
  const [showPeriodModal, setShowPeriodModal] = React.useState(false);
  const [showAssignmentModal, setShowAssignmentModal] = React.useState(false);
  const [tempSelectedAssignments, setTempSelectedAssignments] = React.useState<string[]>([]);
  const [customStartYear, setCustomStartYear] = React.useState('');
  const [customStartMonth, setCustomStartMonth] = React.useState('');
  const [customEndYear, setCustomEndYear] = React.useState('');
  const [customEndMonth, setCustomEndMonth] = React.useState('');

  // ÏûÑÏãú ÌÅ¥ÎûòÏä§ Îç∞Ïù¥ÌÑ∞
  const classes = [
    { id: '1', name: 'ÌÅ¥ÎûòÏä§ A' },
    { id: '2', name: 'ÌÅ¥ÎûòÏä§ B' },
    { id: '3', name: 'ÌÅ¥ÎûòÏä§ C' },
    { id: '4', name: 'ÌÅ¥ÎûòÏä§ D' },
    { id: '5', name: 'ÌÅ¥ÎûòÏä§ E' },
  ];

  // ÏûÑÏãú Í≥ºÏ†ú Îç∞Ïù¥ÌÑ∞
  const assignments = [
    { id: '1', name: '1Ï∞® Ï§ëÍ∞ÑÍ≥†ÏÇ¨' },
    { id: '2', name: '2Ï∞® Ï§ëÍ∞ÑÍ≥†ÏÇ¨' },
    { id: '3', name: 'Í∏∞ÎßêÍ≥†ÏÇ¨' },
    { id: '4', name: 'Í≥ºÏ†ú 1' },
    { id: '5', name: 'Í≥ºÏ†ú 2' },
    { id: '6', name: 'Í≥ºÏ†ú 3' },
    { id: '7', name: 'Í≥ºÏ†ú 4' },
  ];

  // Î†àÏù¥Îçî Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞
  const radarData = [
    {
      subject: 'Íµ≠Ïñ¥',
      ÌÅ¥ÎûòÏä§ÌèâÍ∑†: 85,
      ÎÇ¥Ï†êÏàò: 40,
      fullMark: 100,
    },
    {
      subject: 'ÏòÅÏñ¥',
      ÌÅ¥ÎûòÏä§ÌèâÍ∑†: 60,
      ÎÇ¥Ï†êÏàò: 92,
      fullMark: 100,
    },
    {
      subject: 'ÏàòÌïô',
      ÌÅ¥ÎûòÏä§ÌèâÍ∑†: 82,
      ÎÇ¥Ï†êÏàò: 75,
      fullMark: 100,
    },
  ];

  // Í∏∞Î≥∏ ComposedChart Îç∞Ïù¥ÌÑ∞
  const defaultChartData = [
    {
      name: '1Ïõî',
      ÌÅ¥ÎûòÏä§ÌèâÍ∑†: 85,
      ÎÇ¥Ï†êÏàò: 78,
      Í≥ºÏ†úÏàò: 5,
    },
    {
      name: '2Ïõî',
      ÌÅ¥ÎûòÏä§ÌèâÍ∑†: 88,
      ÎÇ¥Ï†êÏàò: 82,
      Í≥ºÏ†úÏàò: 7,
    },
    {
      name: '3Ïõî',
      ÌÅ¥ÎûòÏä§ÌèâÍ∑†: 82,
      ÎÇ¥Ï†êÏàò: 75,
      Í≥ºÏ†úÏàò: 6,
    },
    {
      name: '4Ïõî',
      ÌÅ¥ÎûòÏä§ÌèâÍ∑†: 90,
      ÎÇ¥Ï†êÏàò: 85,
      Í≥ºÏ†úÏàò: 8,
    },
    {
      name: '5Ïõî',
      ÌÅ¥ÎûòÏä§ÌèâÍ∑†: 87,
      ÎÇ¥Ï†êÏàò: 80,
      Í≥ºÏ†úÏàò: 6,
    },
    {
      name: '6Ïõî',
      ÌÅ¥ÎûòÏä§ÌèâÍ∑†: 92,
      ÎÇ¥Ï†êÏàò: 88,
      Í≥ºÏ†úÏàò: 9,
    },
  ];

  // ÎèôÏ†Å Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
  const getChartData = () => {
    if (chartType === 'assignment' && selectedAssignments.length > 0) {
      // Í≥ºÏ†úÎ≥Ñ Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞
      return selectedAssignments.map((assignmentId, index) => {
        const assignment = assignments.find(a => a.id === assignmentId);
        return {
          name: assignment?.name || `Í≥ºÏ†ú${index + 1}`,
          ÌÅ¥ÎûòÏä§ÌèâÍ∑†: Math.floor(Math.random() * 20) + 80, // ÏûÑÏãú Îç∞Ïù¥ÌÑ∞
          ÎÇ¥Ï†êÏàò: Math.floor(Math.random() * 20) + 75, // ÏûÑÏãú Îç∞Ïù¥ÌÑ∞
          Í≥ºÏ†úÏàò: Math.floor(Math.random() * 5) + 3, // ÏûÑÏãú Îç∞Ïù¥ÌÑ∞
        };
      });
    } else if (chartType === 'period') {
      // Í∏∞Í∞ÑÎ≥Ñ Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ (ÏÑ†ÌÉùÎêú Í∏∞Í∞ÑÏóê Îî∞Îùº ÌïÑÌÑ∞ÎßÅ)
      if (customStartYear && customEndYear && customStartMonth && customEndMonth) {
        // Ïª§Ïä§ÌÖÄ Í∏∞Í∞ÑÏóê Îî∞Î•∏ Îç∞Ïù¥ÌÑ∞ ÌïÑÌÑ∞ÎßÅ Î°úÏßÅ
        return defaultChartData; // ÏûÑÏãúÎ°ú Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
      }
      return defaultChartData;
    }
    return defaultChartData;
  };

  const composedChartData = getChartData();

  // Í≥ºÏ†ú Îç∞Ïù¥ÌÑ∞ Î°úÎî©
  React.useEffect(() => {
    if (userProfile?.id) {
      loadDashboardAssignments();
    }
  }, [userProfile]);

  const loadDashboardAssignments = async () => {
    if (!userProfile?.id) return;
    
    setIsLoadingAssignments(true);
    try {
      const allAssignments: any[] = [];
      
      // ÏàòÌïô Í≥ºÏ†ú
      try {
        const mathAssignments = await mathService.getStudentAssignments(userProfile.id);
        allAssignments.push(...mathAssignments.map((assignment: any) => ({
          ...assignment,
          subject: 'ÏàòÌïô',
          id: assignment.assignment_id,
          title: assignment.title,
          problem_count: assignment.problem_count,
          status: assignment.status,
          deployed_at: assignment.deployed_at,
        })));
      } catch (error) {
        console.log('ÏàòÌïô Í≥ºÏ†ú Î°úÎìú Ïã§Ìå®:', error);
      }

      // Íµ≠Ïñ¥ Í≥ºÏ†ú
      try {
        const koreanAssignments = await koreanService.getStudentAssignments(userProfile.id);
        allAssignments.push(...koreanAssignments.map((assignment: any) => ({
          ...assignment,
          subject: 'Íµ≠Ïñ¥',
          id: assignment.assignment_id,
          title: assignment.title,
          problem_count: assignment.problem_count,
          status: assignment.status,
          deployed_at: assignment.deployed_at,
        })));
      } catch (error) {
        console.log('Íµ≠Ïñ¥ Í≥ºÏ†ú Î°úÎìú Ïã§Ìå®:', error);
      }

      // ÏòÅÏñ¥ Í≥ºÏ†ú
      try {
        const englishAssignments = await EnglishService.getStudentAssignments(userProfile.id);
        allAssignments.push(...englishAssignments.map((assignment: any) => ({
          ...assignment,
          subject: 'ÏòÅÏñ¥',
          id: assignment.assignment?.id || assignment.assignment_id,
          title: assignment.assignment?.title || assignment.title,
          problem_count: assignment.assignment?.total_questions || assignment.total_questions,
          status: assignment.deployment?.status || assignment.status,
          deployed_at: assignment.deployment?.deployed_at || assignment.deployed_at,
        })));
      } catch (error) {
        console.log('ÏòÅÏñ¥ Í≥ºÏ†ú Î°úÎìú Ïã§Ìå®:', error);
      }

      setDashboardAssignments(allAssignments);
      console.log('üìã Î°úÎìúÎêú Î™®Îì† Í≥ºÏ†ú:', allAssignments);
      console.log('üìã Í≥ºÏ†ú ÏÉÅÌÉúÎì§:', allAssignments.map(a => ({ title: a.title, status: a.status, subject: a.subject })));
      
      // ÎØ∏ÏùëÏãú Í≥ºÏ†ú ÎîîÎ≤ÑÍπÖ
      const unsubmitted = allAssignments.filter(assignment => {
        const status = assignment.status?.toLowerCase();
        return status === 'deployed' || 
               status === 'assigned' || 
               status === 'ÎØ∏ÏùëÏãú' ||
               status === 'not_started' ||
               status === 'pending' ||
               !status;
      });
      console.log('üìã ÎØ∏ÏùëÏãú Í≥ºÏ†úÎì§:', unsubmitted);
    } catch (error) {
      console.error('Í≥ºÏ†ú Î°úÎìú Ïã§Ìå®:', error);
    } finally {
      setIsLoadingAssignments(false);
    }
  };

  // Í≥ºÏ†ú ÏÉÅÌÉúÎ≥Ñ Î∂ÑÎ•ò (Îçî Ïú†Ïó∞Ìïú ÌïÑÌÑ∞ÎßÅ)
  const unsubmittedAssignments = dashboardAssignments.filter(assignment => {
    const status = assignment.status?.toLowerCase();
    console.log(`üîç Í≥ºÏ†ú "${assignment.title}" ÏÉÅÌÉú ÌôïÏù∏:`, status);
    
    // ÎØ∏ÏùëÏãú ÏÉÅÌÉúÎì§ (Îçî Ìè¨Í¥ÑÏ†ÅÏúºÎ°ú)
    const isUnsubmitted = status === 'deployed' || 
           status === 'assigned' || 
           status === 'ÎØ∏ÏùëÏãú' ||
           status === 'not_started' ||
           status === 'pending' ||
           status === 'active' ||
           status === 'available' ||
           !status; // ÏÉÅÌÉúÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ÎèÑ ÎØ∏Ï†úÏ∂úÎ°ú Í∞ÑÏ£º
    
    console.log(`üîç "${assignment.title}" ÎØ∏ÏùëÏãú Ïó¨Î∂Ä:`, isUnsubmitted);
    return isUnsubmitted;
  });

  const gradedAssignments = dashboardAssignments.filter(assignment => {
    const status = assignment.status?.toLowerCase();
    return status === 'completed' || 
           status === 'submitted' || 
           status === 'ÏùëÏãú' ||
           status === 'graded' ||
           status === 'finished';
  });

  // ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏
  console.log('üîç ÎØ∏Ï†úÏ∂ú Í≥ºÏ†úÎì§:', unsubmittedAssignments);
  console.log('üîç Ï±ÑÏ†ê ÏôÑÎ£å Í≥ºÏ†úÎì§:', gradedAssignments);

  // Í≥ºÏ†ú ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handleAssignmentClick = (assignment: any) => {
    router.push('/test');
  };

  // Í≥ºÏ†ú ÏÑ†ÌÉù Ìï∏Îì§Îü¨ (ÎìúÎ°≠Îã§Ïö¥ÏóêÏÑú ÏÑ†ÌÉù)
  const handleAssignmentSelect = (assignmentId: string) => {
    if (assignmentId && !selectedAssignments.includes(assignmentId) && selectedAssignments.length < 5) {
      setSelectedAssignments(prev => [...prev, assignmentId]);
      setSelectedAssignment(''); // ÎìúÎ°≠Îã§Ïö¥ Ï¥àÍ∏∞Ìôî
    }
  };

  // Í≥ºÏ†ú Ï†úÍ±∞ Ìï∏Îì§Îü¨ (Î∞∞ÏßÄÏóêÏÑú Ï†úÍ±∞)
  const handleAssignmentRemove = (assignmentId: string) => {
    setSelectedAssignments(prev => prev.filter(id => id !== assignmentId));
  };

  // Í∏∞Í∞Ñ ÏÑ§Ï†ï Ï†ÅÏö©
  const handlePeriodApply = () => {
    // ÎÇ†Ïßú Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    if (!customStartYear || !customStartMonth || !customEndYear || !customEndMonth) {
      alert('ÏãúÏûëÏùºÍ≥º Ï¢ÖÎ£åÏùºÏùÑ Î™®Îëê ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    // Ïò§Îäò Ïù¥ÌõÑ ÎÇ†Ïßú Ï≤¥ÌÅ¨
    const today = new Date();
    const endDate = new Date(parseInt(customEndYear), parseInt(customEndMonth) - 1);
    if (endDate > today) {
      alert('Ïò§Îäò Ïù¥ÌõÑ ÎÇ†ÏßúÎäî ÏÑ†ÌÉùÌï† Ïàò ÏóÜÏäµÎãàÎã§.');
      return;
    }

    // ÏµúÎåÄ 10Í∞úÏõî Ï≤¥ÌÅ¨
    const startDate = new Date(parseInt(customStartYear), parseInt(customStartMonth) - 1);
    const monthDiff = (endDate.getFullYear() - startDate.getFullYear()) * 12 + (endDate.getMonth() - startDate.getMonth());
    if (monthDiff > 10) {
      alert('ÏµúÎåÄ 10Í∞úÏõîÍπåÏßÄ ÏÑ†ÌÉù Í∞ÄÎä•Ìï©ÎãàÎã§.');
      return;
    }

    setShowPeriodModal(false);
    // Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûêÎèôÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏Îê® (composedChartDataÍ∞Ä Î≥ÄÍ≤ΩÎê®)
  };

  // Í≥ºÏ†ú ÏÑ†ÌÉù Î™®Îã¨ Ïó¥Í∏∞
  const handleOpenAssignmentModal = () => {
    setTempSelectedAssignments([...selectedAssignments]);
    setShowAssignmentModal(true);
  };

  // Í≥ºÏ†ú ÏÑ†ÌÉù Î™®Îã¨ Ï†ÅÏö©
  const handleAssignmentModalApply = () => {
    if (tempSelectedAssignments.length < 1) {
      alert('ÏµúÏÜå 1Í∞ú Ïù¥ÏÉÅÏùò Í≥ºÏ†úÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }
    if (tempSelectedAssignments.length > 5) {
      alert('ÏµúÎåÄ 5Í∞úÍπåÏßÄ ÏÑ†ÌÉù Í∞ÄÎä•Ìï©ÎãàÎã§.');
      return;
    }
    setSelectedAssignments(tempSelectedAssignments);
    setShowAssignmentModal(false);
  };

  // Í≥ºÏ†ú ÏÑ†ÌÉù/Ìï¥Ï†ú
  const handleAssignmentToggle = (assignmentId: string) => {
    setTempSelectedAssignments(prev => {
      if (prev.includes(assignmentId)) {
        return prev.filter(id => id !== assignmentId);
      } else if (prev.length < 5) {
        return [...prev, assignmentId];
      }
      return prev;
    });
  };

  // ÎÖÑÎèÑ ÏòµÏÖò ÏÉùÏÑ±
  const generateYearOptions = () => {
    const currentYear = new Date().getFullYear();
    const years = [];
    for (let i = currentYear; i >= currentYear - 5; i--) {
      years.push(i.toString());
    }
    return years;
  };

  // Ïõî ÏòµÏÖò ÏÉùÏÑ±
  const generateMonthOptions = () => {
    return Array.from({ length: 12 }, (_, i) => (i + 1).toString().padStart(2, '0'));
  };

  return (
    <div className="flex flex-col" style={{ padding: '20px', display: 'flex', gap: '20px' }}>
      <PageHeader
        icon={<RxDashboard />}
        title={`${userProfile?.name || 'ÌïôÏÉù'}ÎãòÏùò ÎåÄÏãúÎ≥¥Îìú`}
        variant="default"
        description="ÎÇòÏùò ÌïôÏäµ ÌòÑÌô©Í≥º ÏÑ±Ï†ÅÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî"
      />

      {/* Main Dashboard Layout */}
      <div className="flex-1 grid grid-cols-1 lg:grid-cols-3 gap-6 h-full">
        
        {/* Left Section */}
        <div className="flex flex-col gap-6 lg:col-span-2 h-full">
          
          {/* Left Top - Í≥ºÏ†úÎ≥Ñ ÌèâÍ∑† ÎåÄÎπÑ ÎÇ¥ Ï†êÏàò */}
          <Card className="flex-1 shadow-sm p-5">
            <CardHeader className="border-b border-gray-100 pb-0 mb-0">
              <h3 className="text-xl font-bold text-gray-900 m-0 p-0">Í≥ºÏ†úÎ≥Ñ ÌèâÍ∑† ÎåÄÎπÑ ÎÇ¥ Ï†êÏàò</h3>
        </CardHeader>
            <div>
              <div className="flex items-center gap-4 flex-wrap">
                {/* 1. ÌÅ¥ÎûòÏä§ ÎìúÎ°≠Îã§Ïö¥ */}
              <Select value={selectedClass} onValueChange={setSelectedClass}>
                <SelectTrigger className="w-48">
                    <SelectValue placeholder="ÌÅ¥ÎûòÏä§Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî" />
                </SelectTrigger>
                <SelectContent>
                  {classes.map((cls) => (
                    <SelectItem key={cls.id} value={cls.id}>
                      {cls.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

                {/* 2. Í∏∞Í∞ÑÎ≥Ñ/Í≥ºÏ†úÎ≥Ñ ÎìúÎ°≠Îã§Ïö¥ */}
                <Select value={chartType} onValueChange={(value: 'period' | 'assignment') => setChartType(value)}>
                  <SelectTrigger className="w-32">
                    <SelectValue placeholder="Î∂ÑÏÑù Î∞©Ïãù" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="period">Í∏∞Í∞ÑÎ≥Ñ</SelectItem>
                    <SelectItem value="assignment">Í≥ºÏ†úÎ≥Ñ</SelectItem>
                  </SelectContent>
                </Select>

                {/* 3. Í∏∞Í∞ÑÎ≥Ñ ÏÑ†ÌÉù Ïãú Í∏∞Í∞Ñ ÏÑ§Ï†ï */}
                {chartType === 'period' && (
                  <Button
                    variant="outline"
                    onClick={() => setShowPeriodModal(true)}
                    className="flex items-center gap-2"
                  >
                    <Settings className="h-4 w-4" />
                    Í∏∞Í∞Ñ ÏÑ§Ï†ï
                  </Button>
                )}

                {/* 4. Í≥ºÏ†úÎ≥Ñ ÏÑ†ÌÉù Ïãú Í≥ºÏ†ú ÏÑ†ÌÉù Î≤ÑÌäº */}
                {chartType === 'assignment' && (
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      onClick={handleOpenAssignmentModal}
                      className="flex items-center gap-2"
                    >
                      <FileText className="h-4 w-4" />
                      Í≥ºÏ†ú ÏÑ†ÌÉù ({selectedAssignments.length}/5)
                    </Button>
                  </div>
                )}
                </div>

              {/* ÏÑ†ÌÉùÎêú Í≥ºÏ†úÎì§ ÌëúÏãú (Í≥ºÏ†úÎ≥Ñ ÏÑ†ÌÉù Ïãú) */}
              {chartType === 'assignment' && selectedAssignments.length > 0 && (
                <div className="flex flex-wrap gap-2 mt-2">
                  {selectedAssignments.map((assignmentId) => {
                    const assignment = assignments.find(a => a.id === assignmentId);
                    return assignment ? (
                      <Badge key={assignmentId} variant="secondary" className="flex items-center gap-1">
                        {assignment.name}
                        <button
                          onClick={() => handleAssignmentRemove(assignmentId)}
                          className="ml-1 text-gray-500 hover:text-gray-700"
                        >
                          √ó
                        </button>
                      </Badge>
                    ) : null;
                  })}
                </div>
              )}
              </div>
            <CardContent className="pt-4">
              <div className="h-96 bg-white rounded-lg border border-gray-200">
                <ResponsiveContainer width="100%" height="100%">
                  <ComposedChart
                    data={composedChartData}
                    margin={{
                      top: 20,
                      right: 20,
                      bottom: 20,
                      left: 20,
                    }}
                  >
                    <CartesianGrid stroke="#f5f5f5" />
                    <XAxis dataKey="name" scale="band" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Area type="monotone" dataKey="Í≥ºÏ†úÏàò" fill="#8884d8" stroke="#8884d8" />
                    <Bar dataKey="ÌÅ¥ÎûòÏä§ÌèâÍ∑†" barSize={20} fill="#413ea0" />
                    <Line type="monotone" dataKey="ÎÇ¥Ï†êÏàò" stroke="#ff7300" />
                  </ComposedChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          {/* Left Bottom - Two Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 flex-1">
            
            {/* Assignment Not Submitted */}
            <Card className="shadow-sm h-full flex flex-col p-5">
              <CardHeader className="border-b border-gray-100 pb-0 mb-0">
                <h3 className="text-xl font-bold text-gray-900 m-0 p-0">Í≥ºÏ†ú ÎØ∏Ï†úÏ∂ú</h3>
              </CardHeader>
              <CardContent className="flex-1">
                <div className="h-full bg-white rounded-lg border border-gray-200 overflow-y-auto">
                  {isLoadingAssignments ? (
                    <div className="h-full flex items-center justify-center">
                      <div className="text-center">
                        <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500 mx-auto mb-2"></div>
                        <p className="text-gray-500 text-xs">Î°úÎî© Ï§ë...</p>
                      </div>
                    </div>
                  ) : unsubmittedAssignments.length === 0 ? (
                    <div className="h-full flex items-center justify-center">
                      <div className="text-center">
                        <ClipboardList className="h-6 w-6 text-gray-300 mx-auto mb-2" />
                        <p className="text-gray-500 text-xs">ÎØ∏Ï†úÏ∂ú Í≥ºÏ†úÍ∞Ä ÏóÜÏäµÎãàÎã§</p>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-2 p-5">
                      {unsubmittedAssignments.map((assignment, index) => (
                        <div
                          key={index}
                          onClick={() => handleAssignmentClick(assignment)}
                          className="p-3 bg-gray-50 rounded-lg border border-gray-200 hover:bg-gray-100 cursor-pointer transition-colors"
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex-1 min-w-0">
                              <h4 className="text-sm font-medium text-gray-900 truncate">
                                {assignment.title}
                              </h4>
                              <div className="flex items-center gap-2 mt-1">
                                <span className="text-xs text-gray-500">
                                  {assignment.subject || 'Í≥ºÎ™© ÎØ∏ÏßÄÏ†ï'}
                                </span>
                                <span className="text-xs text-gray-400">‚Ä¢</span>
                                <span className="text-xs text-gray-500">
                                  {assignment.problem_count || 0}Î¨∏Ï†ú
                                </span>
                              </div>
                            </div>
                            <div className="flex items-center gap-2">
                              <Clock className="h-4 w-4 text-orange-500" />
                              <span className="text-xs text-orange-500 font-medium">ÎØ∏ÏùëÏãú</span>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Assignment Graded */}
            <Card className="shadow-sm h-full flex flex-col p-5">
              <CardHeader className="border-b border-gray-100 pb-0 mb-0">
                <h3 className="text-xl font-bold text-gray-900 m-0 p-0">Í≥ºÏ†ú Ï±ÑÏ†ê ÏôÑÎ£å</h3>
              </CardHeader>
              <CardContent className="flex-1">
                <div className="h-full bg-white rounded-lg border border-gray-200 overflow-y-auto">
                  {isLoadingAssignments ? (
                    <div className="h-full flex items-center justify-center">
                      <div className="text-center">
                        <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500 mx-auto mb-2"></div>
                        <p className="text-gray-500 text-xs">Î°úÎî© Ï§ë...</p>
              </div>
                        </div>
                  ) : gradedAssignments.length === 0 ? (
                    <div className="h-full flex items-center justify-center">
                      <div className="text-center">
                        <FileText className="h-6 w-6 text-gray-300 mx-auto mb-2" />
                        <p className="text-gray-500 text-xs">Ï±ÑÏ†ê ÏôÑÎ£åÎêú Í≥ºÏ†úÍ∞Ä ÏóÜÏäµÎãàÎã§</p>
                      </div>
                    </div>
                  ) : (
                    <div className="p-2 space-y-2">
                      {gradedAssignments.slice(0, 3).map((assignment) => (
                        <div
                          key={assignment.id}
                          className="p-2 bg-gray-50 rounded-lg hover:bg-gray-100 cursor-pointer transition-colors"
                          onClick={() => handleAssignmentClick(assignment)}
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex-1 min-w-0">
                              <p className="text-xs font-medium text-gray-900 truncate">
                                {assignment.title}
                              </p>
                              <div className="flex items-center gap-2 mt-1">
                                <Badge className="bg-green-100 text-green-800 text-xs px-1 py-0">
                                  {assignment.subject}
                                </Badge>
                                <span className="text-xs text-gray-500">
                                  {assignment.problem_count}Î¨∏Ï†ú
                                </span>
                                {assignment.score && (
                                  <span className="text-xs font-medium text-green-600">
                                    {assignment.score}Ï†ê
                                  </span>
                                )}
                              </div>
                            </div>
                            <CheckCircle className="h-4 w-4 text-green-500" />
                          </div>
                        </div>
                      ))}
                      {gradedAssignments.length > 3 && (
                        <p className="text-xs text-gray-400 text-center">
                          +{gradedAssignments.length - 3}Í∞ú Îçî
                        </p>
                      )}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Right Section */}
        <Card className="shadow-sm lg:col-span-1 h-full flex flex-col p-5">
          <CardHeader className="border-b border-gray-100 pb-0 mb-0">
            <h3 className="text-xl font-bold text-gray-900 m-0 p-0">Í≥ºÎ™©Î≥Ñ ÌèâÍ∑† ÎåÄÎπÑ ÎÇ¥ ÏÑ±Ï∑®ÎèÑ</h3>
          </CardHeader>
          <div>
            <div className="flex items-center gap-4">
              <label className="text-sm font-medium text-gray-700">ÌÅ¥ÎûòÏä§ ÏÑ†ÌÉù</label>
              <Select value={selectedClass} onValueChange={setSelectedClass}>
                <SelectTrigger className="w-48">
                  <SelectValue placeholder="ÌÅ¥ÎûòÏä§Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî" />
                </SelectTrigger>
                <SelectContent>
                  {classes.map((cls) => (
                    <SelectItem key={cls.id} value={cls.id}>
                      {cls.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
          <CardContent className="flex-1 pt-4">
            <div className="h-96 bg-white rounded-lg border border-gray-200">
              <ResponsiveContainer width="100%" height="100%">
                <RadarChart cx="50%" cy="50%" outerRadius="80%" data={radarData}>
                  <PolarGrid />
                  <PolarAngleAxis dataKey="subject" />
                  <PolarRadiusAxis angle={30} domain={[0, 100]} />
                  <Radar name="ÌÅ¥ÎûòÏä§ÌèâÍ∑†" dataKey="ÌÅ¥ÎûòÏä§ÌèâÍ∑†" stroke="#8884d8" fill="#8884d8" fillOpacity={0.6} />
                  <Radar name="ÎÇ¥Ï†êÏàò" dataKey="ÎÇ¥Ï†êÏàò" stroke="#82ca9d" fill="#82ca9d" fillOpacity={0.6} />
                  <Legend />
                </RadarChart>
              </ResponsiveContainer>
            </div>
            
            {/* Í≥ºÎ™©Î≥Ñ Ï†êÏàò ÏöîÏïΩ Ï†ïÎ≥¥ */}
            <div className="mt-4 pt-4 border-t border-gray-200">
              <div className="space-y-3">
                {/* Íµ≠Ïñ¥ */}
                <div className="p-3 rounded-lg">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                      <span className="text-sm font-medium text-gray-700">Íµ≠Ïñ¥</span>
                    </div>
                    <div className="w-4 h-4 rounded-full bg-gray-200 flex items-center justify-center">
                      <span className="text-xs text-gray-500">i</span>
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-3">
                    <div className="relative">
                      <div className="text-xs text-gray-500 mb-2 text-left">Ï†ÑÏ≤¥ ÌèâÍ∑†</div>
                      <div className="flex flex-col justify-center items-center p-4 bg-green-50 rounded-lg h-24">
                        <div className="text-2xl font-bold text-gray-900">
                          {radarData.find(item => item.subject === 'Íµ≠Ïñ¥')?.ÌÅ¥ÎûòÏä§ÌèâÍ∑† || 0}Ï†ê
                        </div>
                      </div>
                    </div>
                    <div className="relative">
                      <div className="text-xs text-gray-500 mb-2 text-left">ÎÇ¥ ÌèâÍ∑†</div>
                      <div className="flex flex-col justify-center items-center p-4 bg-green-50 rounded-lg h-24">
                        <div className="text-2xl font-bold text-gray-900">
                          {radarData.find(item => item.subject === 'Íµ≠Ïñ¥')?.ÎÇ¥Ï†êÏàò || 0}Ï†ê
                        </div>
                        <div className="mt-2">
                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                            (radarData.find(item => item.subject === 'Íµ≠Ïñ¥')?.ÎÇ¥Ï†êÏàò || 0) >= 
                            (radarData.find(item => item.subject === 'Íµ≠Ïñ¥')?.ÌÅ¥ÎûòÏä§ÌèâÍ∑† || 0)
                              ? 'bg-blue-100 text-blue-600' : 'bg-red-100 text-red-600'
                          }`}>
                            {(radarData.find(item => item.subject === 'Íµ≠Ïñ¥')?.ÎÇ¥Ï†êÏàò || 0) >= 
                             (radarData.find(item => item.subject === 'Íµ≠Ïñ¥')?.ÌÅ¥ÎûòÏä§ÌèâÍ∑† || 0) ? '‚Üó' : '‚Üì'} 
                            {Math.abs((radarData.find(item => item.subject === 'Íµ≠Ïñ¥')?.ÎÇ¥Ï†êÏàò || 0) - 
                                      (radarData.find(item => item.subject === 'Íµ≠Ïñ¥')?.ÌÅ¥ÎûòÏä§ÌèâÍ∑† || 0))}Ï†ê
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* ÏòÅÏñ¥ */}
                <div className="p-3 rounded-lg">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 bg-purple-500 rounded-full"></div>
                      <span className="text-sm font-medium text-gray-700">ÏòÅÏñ¥</span>
                    </div>
                    <div className="w-4 h-4 rounded-full bg-gray-200 flex items-center justify-center">
                      <span className="text-xs text-gray-500">i</span>
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-3">
                    <div className="relative">
                      <div className="text-xs text-gray-500 mb-2 text-left">Ï†ÑÏ≤¥ ÌèâÍ∑†</div>
                      <div className="flex flex-col justify-center items-center p-4 bg-purple-50 rounded-lg h-24">
                        <div className="text-2xl font-bold text-gray-900">
                          {radarData.find(item => item.subject === 'ÏòÅÏñ¥')?.ÌÅ¥ÎûòÏä§ÌèâÍ∑† || 0}Ï†ê
                        </div>
                      </div>
                    </div>
                    <div className="relative">
                      <div className="text-xs text-gray-500 mb-2 text-left">ÎÇ¥ ÌèâÍ∑†</div>
                      <div className="flex flex-col justify-center items-center p-4 bg-purple-50 rounded-lg h-24">
                        <div className="text-2xl font-bold text-gray-900">
                          {radarData.find(item => item.subject === 'ÏòÅÏñ¥')?.ÎÇ¥Ï†êÏàò || 0}Ï†ê
                        </div>
                        <div className="mt-2">
                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                            (radarData.find(item => item.subject === 'ÏòÅÏñ¥')?.ÎÇ¥Ï†êÏàò || 0) >= 
                            (radarData.find(item => item.subject === 'ÏòÅÏñ¥')?.ÌÅ¥ÎûòÏä§ÌèâÍ∑† || 0)
                              ? 'bg-blue-100 text-blue-600' : 'bg-red-100 text-red-600'
                          }`}>
                            {(radarData.find(item => item.subject === 'ÏòÅÏñ¥')?.ÎÇ¥Ï†êÏàò || 0) >= 
                             (radarData.find(item => item.subject === 'ÏòÅÏñ¥')?.ÌÅ¥ÎûòÏä§ÌèâÍ∑† || 0) ? '‚Üó' : '‚Üì'} 
                            {Math.abs((radarData.find(item => item.subject === 'ÏòÅÏñ¥')?.ÎÇ¥Ï†êÏàò || 0) - 
                                      (radarData.find(item => item.subject === 'ÏòÅÏñ¥')?.ÌÅ¥ÎûòÏä§ÌèâÍ∑† || 0))}Ï†ê
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* ÏàòÌïô */}
                <div className="p-3 rounded-lg">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                      <span className="text-sm font-medium text-gray-700">ÏàòÌïô</span>
                    </div>
                    <div className="w-4 h-4 rounded-full bg-gray-200 flex items-center justify-center">
                      <span className="text-xs text-gray-500">i</span>
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-3">
                    <div className="relative">
                      <div className="text-xs text-gray-500 mb-2 text-left">Ï†ÑÏ≤¥ ÌèâÍ∑†</div>
                      <div className="flex flex-col justify-center items-center p-4 bg-yellow-50 rounded-lg h-24">
                        <div className="text-2xl font-bold text-gray-900">
                          {radarData.find(item => item.subject === 'ÏàòÌïô')?.ÌÅ¥ÎûòÏä§ÌèâÍ∑† || 0}Ï†ê
                        </div>
                      </div>
                    </div>
                    <div className="relative">
                      <div className="text-xs text-gray-500 mb-2 text-left">ÎÇ¥ ÌèâÍ∑†</div>
                      <div className="flex flex-col justify-center items-center p-4 bg-yellow-50 rounded-lg h-24">
                        <div className="text-2xl font-bold text-gray-900">
                          {radarData.find(item => item.subject === 'ÏàòÌïô')?.ÎÇ¥Ï†êÏàò || 0}Ï†ê
                        </div>
                        <div className="mt-2">
                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                            (radarData.find(item => item.subject === 'ÏàòÌïô')?.ÎÇ¥Ï†êÏàò || 0) >= 
                            (radarData.find(item => item.subject === 'ÏàòÌïô')?.ÌÅ¥ÎûòÏä§ÌèâÍ∑† || 0)
                              ? 'bg-blue-100 text-blue-600' : 'bg-red-100 text-red-600'
                          }`}>
                            {(radarData.find(item => item.subject === 'ÏàòÌïô')?.ÎÇ¥Ï†êÏàò || 0) >= 
                             (radarData.find(item => item.subject === 'ÏàòÌïô')?.ÌÅ¥ÎûòÏä§ÌèâÍ∑† || 0) ? '‚Üó' : '‚Üì'} 
                            {Math.abs((radarData.find(item => item.subject === 'ÏàòÌïô')?.ÎÇ¥Ï†êÏàò || 0) - 
                                      (radarData.find(item => item.subject === 'ÏàòÌïô')?.ÌÅ¥ÎûòÏä§ÌèâÍ∑† || 0))}Ï†ê
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
            </div>
          </div>
        </CardContent>
      </Card>
      </div>

      {/* Í∏∞Í∞Ñ ÏÑ§Ï†ï Î™®Îã¨ */}
      <Dialog open={showPeriodModal} onOpenChange={setShowPeriodModal}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Calendar className="h-5 w-5 text-blue-600" />
              Ï∞®Ìä∏ Í∏∞Í∞Ñ ÏÑ§Ï†ï
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-6">
            {/* Ïª§Ïä§ÌÖÄ Í∏∞Í∞Ñ */}
            <div>
              <label className="text-sm font-medium text-gray-700 mb-3 block">Í∏∞Í∞Ñ ÏÑ†ÌÉù</label>
              <div className="space-y-4">
                {/* ÏãúÏûë Í∏∞Í∞Ñ */}
                <div>
                  <label className="text-xs text-gray-600 mb-2 block">ÏãúÏûë</label>
                  <div className="flex gap-2">
                    <Select value={customStartYear} onValueChange={setCustomStartYear}>
                      <SelectTrigger className="flex-1">
                        <SelectValue placeholder="ÎÖÑÎèÑ" />
                      </SelectTrigger>
                      <SelectContent>
                        {generateYearOptions().map(year => (
                          <SelectItem key={year} value={year}>{year}ÎÖÑ</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <Select value={customStartMonth} onValueChange={setCustomStartMonth}>
                      <SelectTrigger className="flex-1">
                        <SelectValue placeholder="Ïõî" />
                      </SelectTrigger>
                      <SelectContent>
                        {generateMonthOptions().map(month => (
                          <SelectItem key={month} value={month}>{month}Ïõî</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {/* Ï¢ÖÎ£å Í∏∞Í∞Ñ */}
                <div>
                  <label className="text-xs text-gray-600 mb-2 block">Ï¢ÖÎ£å</label>
                  <div className="flex gap-2">
                    <Select value={customEndYear} onValueChange={setCustomEndYear}>
                      <SelectTrigger className="flex-1">
                        <SelectValue placeholder="ÎÖÑÎèÑ" />
                      </SelectTrigger>
                      <SelectContent>
                        {generateYearOptions().map(year => (
                          <SelectItem key={year} value={year}>{year}ÎÖÑ</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <Select value={customEndMonth} onValueChange={setCustomEndMonth}>
                      <SelectTrigger className="flex-1">
                        <SelectValue placeholder="Ïõî" />
                      </SelectTrigger>
                      <SelectContent>
                        {generateMonthOptions().map(month => (
                          <SelectItem key={month} value={month}>{month}Ïõî</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>
            </div>

            {/* ÏïàÎÇ¥ ÏÇ¨Ìï≠ */}
            <div className="p-3 bg-gray-50 rounded-lg">
              <ul className="text-xs text-gray-600 space-y-1">
                <li>‚Ä¢ ÏµúÎåÄ 10Í∞úÏõîÍπåÏßÄ ÏÑ†ÌÉù Í∞ÄÎä•Ìï©ÎãàÎã§</li>
                <li>‚Ä¢ Ïò§Îäò Ïù¥ÌõÑ ÎÇ†ÏßúÎäî ÏÑ†ÌÉùÌï† Ïàò ÏóÜÏäµÎãàÎã§</li>
                <li>‚Ä¢ Í∏∞Í∞ÑÏùÑ ÏÑ†ÌÉùÌïòÎ©¥ Ìï¥Îãπ Í∏∞Í∞ÑÏùò Îç∞Ïù¥ÌÑ∞Í∞Ä Ï∞®Ìä∏Ïóê ÌëúÏãúÎê©ÎãàÎã§</li>
              </ul>
            </div>
          </div>

          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setShowPeriodModal(false)}
            >
              Ï∑®ÏÜå
            </Button>
            <Button
              onClick={handlePeriodApply}
              className="bg-blue-600 hover:bg-blue-700"
            >
              Ï†ÅÏö©
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Í≥ºÏ†ú ÏÑ†ÌÉù Î™®Îã¨ */}
      <Dialog open={showAssignmentModal} onOpenChange={setShowAssignmentModal}>
        <DialogContent className="sm:max-w-lg">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5 text-blue-600" />
              Í≥ºÏ†ú ÏÑ†ÌÉù (ÏµúÎåÄ 5Í∞ú)
            </DialogTitle>
            <p className="text-sm text-gray-600 mt-2">
              Ï∞®Ìä∏Ïóê ÌëúÏãúÌï† Í≥ºÏ†úÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî. ÏµúÎåÄ 5Í∞úÍπåÏßÄ ÏÑ†ÌÉù Í∞ÄÎä•Ìï©ÎãàÎã§.
            </p>
          </DialogHeader>
          
          <div className="space-y-3">
            <div className="max-h-80 overflow-y-auto space-y-2">
              {assignments.map((assignment) => (
                <div 
                  key={assignment.id} 
                  className={`p-4 border rounded-lg cursor-pointer transition-all hover:shadow-sm ${
                    tempSelectedAssignments.includes(assignment.id) 
                      ? 'border-blue-500 bg-blue-50' 
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                  onClick={() => handleAssignmentToggle(assignment.id)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3">
                        <Checkbox
                          checked={tempSelectedAssignments.includes(assignment.id)}
                          disabled={!tempSelectedAssignments.includes(assignment.id) && tempSelectedAssignments.length >= 5}
                        />
                        <div>
                          <h4 className="font-medium text-gray-900">{assignment.name}</h4>
                          <p className="text-sm text-gray-500">
                            ÏàòÌïô ‚Ä¢ ÎßàÍ∞ê: 2024-03-{assignment.id}5
                          </p>
                        </div>
                      </div>
                    </div>
                    <div className="text-sm text-gray-500">
                      {Math.floor(Math.random() * 15) + 15}/30Î™Ö Ï†úÏ∂ú
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setShowAssignmentModal(false)}
            >
              Ï∑®ÏÜå
            </Button>
            <Button
              onClick={handleAssignmentModalApply}
              className="bg-blue-600 hover:bg-blue-700"
            >
              Ï†ÅÏö©
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default StudentDashboard;
